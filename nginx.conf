
load_module /usr/lib/nginx/modules/ngx_rtmp_module.so;
rtmp {

    server {
      listen 1935;        
        chunk_size 4000;        
       # on_connect http://127.0.0.1:1935/local_redirect;
        # TV mode: one publisher, many subs
            #allow play all;
	application larix {
        live on;
        exec_options on;
        exec_publish name_publish=$(cat /home/tollstream-RTMP-server/streamKey.save) name=name_publish;
        exec_publish export name_publish;
        exec_play name_publish=$(cat /home/tollstream-RTMP-server/streamKey.save) name=$name_publish;
        on_play http://127.0.0.1:8080/local_redirect;
        #whafhhhf hdéhéfhhdèéè5èèhrfgenever a stream reachea the server from local hos
        #run this script to dynamically update streamkem
         }
        # Transcoding (ffmpeg needed)
    
            # On every pusblished stream run this command (ffmpeg)
            # with substitutions: $app/${app}, $name/${name} for application & stream name.
            #
            # This ffmpeg call receives stream from this application &
            # reduces the resolution down to 32x32. The stream is the published to
            # 'small' application (see below) under the same name.
            #
            # ffmpeg can do anything with the stream like video/audio
            # transcoding, resizing, altering container/codec params etc
            #
            # Multiple exec lines can be specified.

          
            # Video with reduced resolution comes here from ffm
            # Stream from local webcam
         

      
            # Every stream published here
            # is automatically pushed to
            # these two machines

######Uncomment and replace examples
   #        push rtmp1.example.com;
       #     push rtmp2.example.com:1935;
        
       
            # Pull all streams from remote machine
            # and play locally
###uncomment and replace example0

    # pull rtmp://rtmp3.example.com pageUrl=www.example.com/index.html;
        
            # Static pull is started at nginx start
##uncomment and replace example

     #  pull rtmp://rtmp4.example.com pageUrl=www.example.com/index.html name=mystream static;
   
        # video on demand
      
        # Many publishers, many subscribers
        # no checks, no recording
      
            # The following notifications receive all
            # the session variables as well as
            # particular call arguments in HTTP POST
            # request

            # Make HTTP request & use HTTP retcode
            # to decide whether to allow publishing
            # from this connection or not
            
            # Same with playing
            
            # Publish/play end (repeats on disconnect)
         
            # All above mentioned notifications receive
            # standard connect() arguments as well as
            # play/publish ones. If any arguments are sent
            # with GET-style syntax to play & publish
            # these are also included.
            # Example URL:
            #   rtmp://localhost/myapp/mystream?a=b&c=d

            # record 10 video keyframes (no audio) every 2 minutes
           
            # Async notify about an flv reco

        # HLS

        # For HLS to work please create a directory in tmpfs (/tmp/hls here)
        # for the fragments. The directory contents is served via HTTP (see
        # http{} section in config)
        #
        # Incoming stream must be in H264/AAC. For iPhones use baseline H264
        # profile (see ffmpeg example).
        # This example creates RTMP stream from movie ready for HLS:
        #l
        # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec l
    }    
}

events {}


# HTTP can be used for accessing RTMP stats
http {
     
    server {

        listen      8080;

      
     # This is a rtmp redirect for local
       location /local_redirect {
            rewrite ^.*$ name_publish? permanent;
	 }
       #where the redirect for changing streamkey exist
       # This URL provides RTMP statistics in XML
         
         location /stat {
            rtmp_stat all;

            # Use this stylesheet to view XML as web page
            # in browser
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            # XML stylesheet to view RTMP stats.
            # Copy stat.xsl wherever you want
            # and put the full directory path here
            root /path/to/stat.xsl/;
        }

        location /hls {
            # Serve HLS fragments
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
        }

        location /dash {
            # Serve DASH fragments
            root /tmp;
            add_header Cache-Control no-cache;
        }
    }
}
